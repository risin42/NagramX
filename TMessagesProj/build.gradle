import java.nio.file.Paths
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'org.jetbrains.kotlin.android'
}

def buildTimestamp = System.getenv("BUILD_TIMESTAMP") ?: "0"
def commitId = System.getenv("COMMIT_ID")
def verName = "${APP_VERSION_NAME}${commitId?.take(7) ? "-${commitId.take(7)}" : ''}"
def verCode = 1219

def officialVer = APP_VERSION_NAME
def officialCode = APP_VERSION_CODE

def keystorePwd = null
def alias = null
def pwd = null

Properties properties
def base64 = System.getenv("LOCAL_PROPERTIES")
if (base64 != null && !base64.isBlank()) {
    properties = new Properties()
    properties.load(new ByteArrayInputStream(Base64.decoder.decode(base64)))
} else if (project.rootProject.file("local.properties").exists()) {
    properties = new Properties()
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
}

if (properties != null) {
    keystorePwd = properties.getProperty("KEYSTORE_PASS")
    alias = properties.getProperty("ALIAS_NAME")
    pwd = properties.getProperty("ALIAS_PASS")
}

keystorePwd = keystorePwd ?: System.getenv("KEYSTORE_PASS")
alias = alias ?: System.getenv("ALIAS_NAME")
pwd = pwd ?: System.getenv("ALIAS_PASS")

def nativeTarget = System.getenv("NATIVE_TARGET") ?: ""

if (nativeTarget == "SKIP") {
    tasks.configureEach { task ->
        if (
            task.name.toLowerCase().contains("cmake") ||
            task.name.toLowerCase().contains("jni") ||
            task.name.toLowerCase().contains("test") ||
            task.name.toLowerCase().contains("uploadCrashlyticsMappingFile")
        ) {
            task.enabled = false
        }
    }
}

android {
    defaultConfig.applicationId = APP_PACKAGE

    packagingOptions {
        resources {
            excludes += '**'
        }
    }

    splits {
        abi {
            enable = true
            reset()
            universalApk = false
            if (!nativeTarget.isBlank()) {
                include nativeTarget
            } else {
                include 'arm64-v8a', 'x86_64'
            }
        }
    }

    defaultConfig {
        versionName verName
        versionCode verCode

        //obtain your own keys at https://core.telegram.org/api/obtaining_api_id
        def appId = "6"
        def appHash = "eb06d4abfb49dc3eeb1aeb98ae0f581e"

        if (properties != null) {
            appId = properties.getProperty("TELEGRAM_APP_ID") ?: System.getenv("TELEGRAM_APP_ID") ?: appId
            appHash = properties.getProperty("TELEGRAM_APP_HASH") ?: System.getenv("TELEGRAM_APP_HASH") ?: appHash
        }

        buildConfigField "String", "BUILD_VERSION_STRING", "\"" + verName + "\""
        buildConfigField "String", "OFFICIAL_VERSION", "\"" + officialVer + "\""
        buildConfigField "int", "OFFICIAL_VERSION_CODE", officialCode + ""
        buildConfigField "int", "APP_ID", appId
        buildConfigField "String", "APP_HASH", "\"" + appHash + "\""
        buildConfigField "long", "BUILD_TIMESTAMP", buildTimestamp + "L"

        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-21', '-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON'
                System.getenv("PATH").split(File.pathSeparator).any { path ->
                    var file = Paths.get("${path}${File.separator}ccache${if (OperatingSystem.current().windows) ".exe" else ""}").toFile()
                    if (file.exists()) {
                        println("Using ccache ${file.getAbsolutePath()}")
                        arguments += "-DANDROID_CCACHE=${file.getAbsolutePath()}"
                        return true
                    }
                }
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    externalNativeBuild {
        cmake {
            version = '3.31.6+'
            path = "jni/CMakeLists.txt"
        }
    }

    signingConfigs {
        release {
            storeFile project.file("release.keystore")
            storePassword keystorePwd
            keyAlias alias
            keyPassword pwd
        }
    }

    buildTypes {
        debug {
            isDefault = true
            debuggable = true
            jniDebuggable = true
            multiDexEnabled = true
            signingConfig = signingConfigs.release
        }

        staging {
            debuggable = false
            jniDebuggable = false
            minifyEnabled = true
            shrinkResources = true
            multiDexEnabled = true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            matchingFallbacks = ["release", "staging", "debug"]
            signingConfig = signingConfigs.release
        }

        release {
            debuggable = false
            jniDebuggable = false
            minifyEnabled = true
            shrinkResources = true
            multiDexEnabled = true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            matchingFallbacks = ["release", "staging", "debug"]
            signingConfig = signingConfigs.release
        }
    }

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            String gramName = "NagramX"
            String first = String.format("%s-v%s(%s)", gramName, versionName, versionCode)
            String name = outputFileName.replace("TMessagesProj", first)
            name = name.replace("-release", "")
            name = name.replace("-staging", "")
            outputFileName = name
        }
    }

    namespace = 'org.telegram.messenger'
}

configurations.configureEach {
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
}

dependencies {
    // official
    implementation 'androidx.fragment:fragment-ktx:1.8.9' // 1.2.0
    implementation 'androidx.core:core-ktx:1.17.0' // 1.10.1
    implementation 'androidx.palette:palette-ktx:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.4.1' // 1.3.6
    implementation 'androidx.dynamicanimation:dynamicanimation-ktx:1.1.0' // 1.0.0
    implementation 'androidx.mediarouter:mediarouter:1.8.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.sharetarget:sharetarget:1.2.0'
    implementation 'androidx.interpolator:interpolator:1.0.0'
    implementation 'androidx.biometric:biometric:1.1.0'
    implementation 'org.nanohttpd:nanohttpd:2.3.1'
    compileOnly 'org.checkerframework:checker-qual:2.5.2'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.0'
    implementation 'com.google.firebase:firebase-messaging:24.1.2' // 22.0.0
    implementation 'com.google.firebase:firebase-crashlytics:19.4.4'
    implementation 'com.google.android.gms:play-services-cast-framework:22.1.0' // 21.4.0
    implementation 'com.google.android.gms:play-services-maps:19.2.0' // 18.1.0
    implementation 'com.google.android.gms:play-services-auth:21.4.0' // 20.4.0
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.gms:play-services-location:21.3.0'
    implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
    implementation 'com.google.mlkit:language-id:17.0.6'
    implementation 'com.google.code.gson:gson:2.13.2'
    implementation ('com.google.guava:guava:33.4.8-android') { // 31.1
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'org.checkerframework', module: 'checker-compat-qual'
        exclude group: 'org.checkerframework', module: 'checker-qual'
        exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
        exclude group: 'com.google.j2objc', module: 'j2objc-annotations'
        exclude group: 'org.codehaus.mojo', module: 'animal-sniffer-annotations'
    }
    implementation 'com.google.android.gms:play-services-mlkit-subject-segmentation:16.0.0-beta1'
    implementation 'com.google.android.gms:play-services-mlkit-image-labeling:16.0.8'
    // payment
    implementation 'com.google.android.gms:play-services-wallet:19.4.0' // 19.1.0
    implementation('com.stripe:stripe-android:2.0.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation 'com.android.billingclient:billing:7.1.1'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs_nio:2.1.5'

    // kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:2.2.20'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2'
    // utilities 
    implementation 'org.osmdroid:osmdroid-android:6.1.20'
    // network
    implementation 'com.squareup.okhttp3:okhttp:5.1.0'
    implementation 'dnsjava:dnsjava:3.6.3'
    // add for emoji
    implementation 'com.jaredrummler:truetypeparser-light:1.0.0'
    // add for UnifiedPush
    implementation 'com.github.UnifiedPush:android-connector:2.3.1'
    // add for save deleted messages
    implementation 'androidx.room:room-runtime:2.7.2'
    annotationProcessor 'androidx.room:room-compiler:2.7.2'
    // add for keep formatting in translations
    implementation 'org.apache.commons:commons-text:1.14.0'
    // translator from nekogram
    implementation 'app.nekogram.translator:translator:1.5.4'

    compileOnly fileTree('libs')
}
