name: Release Build

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/release.yml'
  workflow_dispatch:
    inputs:
      upload:
        description: 'Skip Upload: Set to "y" to skip uploading the build.'
        required: false

jobs:
  ffmpeg:
    name: Native Build (FFmpeg)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Fetch Status
        run: |
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/libvpx > libvpx_status
          git submodule status TMessagesProj/jni/dav1d > libdav1d_status
      - name: FFmpeg Cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            TMessagesProj/jni/ffmpeg/build
            TMessagesProj/jni/libvpx/build
            TMessagesProj/jni/dav1d/build
          key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'libdav1d_status', 'TMessagesProj/jni/*ffmpeg*.sh', 'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/*dav1d*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          python-version: '3.12'
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "y" | sdkmanager --install "ndk;21.4.7075529" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          echo "android.ndkversion=21.4.7075529" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          ./run init action ffmpeg
          ./run init libs libvpx
          ./run init libs dav1d
          ./run init libs ffmpeg
  boringssl:
    name: Native Build (BoringSSL)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Fetch Status
        run: |
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: BoringSSL Cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            TMessagesProj/jni/boringssl/build
          key: ${{ hashFiles('boringssl_status') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "y" | sdkmanager --install "ndk;21.4.7075529" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          echo "android.ndkversion=21.4.7075529" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          ./run init action boringssl
          ./run init libs boringssl
  native:
    name: Native Build (Telegram)
    runs-on: ubuntu-latest
    needs:
      - ffmpeg
      - boringssl
    strategy:
      matrix:
        flavor:
          - arm64-v8a
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Fetch Status
        run: |
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/libvpx > libvpx_status
          git submodule status TMessagesProj/jni/dav1d > libdav1d_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: Native Cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-${{ matrix.flavor }}
      - name: Checkout Library
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git submodule update --init 'TMessagesProj/jni/*'
      - name: FFmpeg Cache
        uses: actions/cache@v4
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: |
            TMessagesProj/jni/ffmpeg/build
            TMessagesProj/jni/libvpx/build
            TMessagesProj/jni/dav1d/build
          key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'libdav1d_status', 'TMessagesProj/jni/*ffmpeg*.sh', 'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/*dav1d*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
      - name: BoringSSL Cache
        uses: actions/cache@v4
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: |
            TMessagesProj/jni/boringssl/build
          key: ${{ hashFiles('boringssl_status') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "y" | sdkmanager --install "ndk;21.4.7075529" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          echo "android.ndkversion=21.4.7075529" >> local.properties
      - name: Fix BoringSSL
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd TMessagesProj/jni
          ./patch_boringssl.sh
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          export NATIVE_TARGET="${{ matrix.flavor }}"
          ./run libs native
  build:
    name: Gradle Build
    runs-on: ubuntu-latest
    needs:
      - native
    outputs:
      build_timestamp: ${{ steps.release_build_step.outputs.build_timestamp }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
      - name: Install NDK
        run: |
          echo "y" | sdkmanager --install "ndk;21.4.7075529" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          echo "android.ndkversion=21.4.7075529" >> local.properties
      - name: Fetch Status
        run: |
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: Native Cache (arm64-v8a)
        uses: actions/cache@v4
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-arm64-v8a
      - name: Configure Gradle
        run: |
          echo "sdk.dir=${ANDROID_HOME}" >> local.properties
      - name: Modify Gradle JVM Args
        run: |
          sed -i '/^org\.gradle\.jvmargs=/d' gradle.properties
          echo "org.gradle.jvmargs=-Xmx8G -XX:MaxMetaspaceSize=2G -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" >> gradle.properties
          cat gradle.properties
      - name: Gradle cache
        uses: actions/cache@v4
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('**/*.gradle') }}
      - name: Release Build
        id: release_build_step
        run: |
          export LOCAL_PROPERTIES="${{ secrets.LOCAL_PROPERTIES }}"
          export DEEPL_API_KEY="${{ secrets.DEEPL_API_KEY }}"
          export BUILD_TIMESTAMP=$(date +%s)
          echo "build_timestamp=$BUILD_TIMESTAMP" >> "$GITHUB_OUTPUT"
          ./gradlew TMessagesProj:assembleRelease

          APK=$(find TMessagesProj/build/outputs/apk -name '*arm64-v8a*.apk' | head -n 1)
          echo "APK=$APK" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: Release
          path: ${{ env.APK }}
  upload:
    name: Upload release
    if: github.event.inputs.upload != 'y' && !contains(github.event.head_commit.message, '[skip upload]')
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Send to Telegram
        env:
          APP_ID: ${{ secrets.APP_ID }}
          APP_HASH: ${{ secrets.APP_HASH }}
          COMMIT_ID: ${{ github.event.head_commit.id }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          BUILD_TIMESTAMP: ${{ needs.build.outputs.build_timestamp }}
        run: |
          # send apk via telegram bot api
          export mini64=$(find artifacts -name "*arm64-v8a.apk")
          echo $mini64
          python -m pip install -r bin/scripts/requirements.txt
          python bin/scripts/upload.py ${{ secrets.HELPER_BOT_TOKEN }} ${{ secrets.HELPER_BOT_TARGET }} release ${{ secrets.HELPER_BOT_CANARY_TARGET }}
